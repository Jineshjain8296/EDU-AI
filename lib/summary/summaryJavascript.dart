import 'package:flutter/material.dart';

class SummaryScript extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Summary Page',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: SummaryPage(),
      debugShowCheckedModeBanner: false, // Disable the debug banner
    );
  }
}

class SummaryPage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Summary Page'),
      ),
      body:SingleChildScrollView( child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Summary',
              style: TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.bold,
              ),
            ),
            SizedBox(height: 16),
            Text(
              '',
              style: TextStyle(
                fontSize: 16,
              ),
            ),
            SizedBox(height: 16),
            Container(
              padding: EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.blue[50],
                borderRadius: BorderRadius.circular(8),
                border: Border.all(
                  color: Colors.blue,
                ),
              ),
              child: Text('This video course is a comprehensive introduction to JavaScript for beginners, covering topics such as variables, arrays, functions, conditionals, and more.HighlightsðŸŽ¥ JavaScript basics and getting started with code editorsðŸ’¡ Writing reusable code with functionsðŸŒŸ Understanding scopes and variable declarationðŸ”„ Mutating arrays and preventing object mutationâž¡ Using arrow functions and higher-order functionsðŸ“¦ Importing and exporting JavaScript modulesKey InsightsðŸ’¡ The use of var, let, and const for variable declaration and their scope differences.ðŸ’¡ Preventing object mutation with object.freeze to maintain data integrity.ðŸ’¡ The benefits of using arrow functions for writing concise and readable code.ðŸ’¡ The powerful functionality of higher-order functions like map, filter, and reduce.ðŸ’¡ The convenience of default parameters and rest parameters for flexible function usage.ðŸ’¡ The versatility of destructuring assignment for easily extracting values from objects and arrays.ðŸ’¡ The importance of understanding module imports and exports for modular JavaScript development.',
                style: TextStyle(
                  fontSize: 16,
                ),
              ),
            ),
            SizedBox(height: 16),
          ],
        ),
      ),)
    );
  }
}
